priority -50

# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.
# Setting "g:ultisnips_java_junit" will change how the test method snippet
# looks, it is defaulted to junit4, setting this option to 3 will remove the
# @Test annotation from the method

global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z0-9><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal

snippet sleep "try sleep catch" b
try {
	Thread.sleep(${1:1000});
} catch (InterruptedException e){
	e.printStackTrace();
}
endsnippet

snippet /i|n/ "new primitive or int" br
${1:int} ${2:i} = ${3:1};
$0
endsnippet

snippet /o|v/ "new Object or variable" br
${1:Object} ${2:var} = new $1($3);
endsnippet

snippet f "field" b
${1:private} ${2:String} ${3:`!p snip.rv = t[2].lower()`};
endsnippet

snippet ab "abstract" b
abstract $0
endsnippet

snippet as "assert" b
assert ${1:test}${2/(.+)/(?1: \: ")/}${2:Failure message}${2/(.+)/(?1:")/};
endsnippet

snippet at "assert true" b
assertTrue(${1:actual});
endsnippet

snippet af "assert false" b
assertFalse(${1:actual});
endsnippet

snippet ae "assert equals" b
assertEquals(${1:expected}, ${2:actual});
endsnippet

snippet br "break"
break;

endsnippet

snippet cs "case" b
case $1:
	$2
$0
endsnippet

snippet ca "catch" b
catch (${1:Exception} ${2:e})`!p nl(snip)`{
	$0
}
endsnippet

snippet cle "class extends" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }${4:implements ${5:Interface} }{
	$0
}
endsnippet

snippet clc "class with constructor, fields, setter and getters" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis." + i[1] + " = " + i[1] + ";"
if len(args) == 0:
	snip.rv += "\n"`
	}$0
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tpublic void set" + camel(i[1]) + "(" + i[0] + " " + i[1] + ") {\n" + "\
	\tthis." + i[1] + " = " + i[1] + ";\n\t}\n"

	snip.rv += "\n\tpublic " + i[0] + " get" + camel(i[1]) + "() {\n\
	\treturn " + i[1] + ";\n\t}\n"
`
}
endsnippet

snippet clc "class with constructor, with field names" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
	}
}
endsnippet

snippet clc "class and constructor" b
public class `!p
snip.rv = snip.basename or "untitled"` {

	public `!p snip.rv = snip.basename or "untitled"`($2) {
		$0
	}
}
endsnippet

snippet cl "class" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} {
	$0
}
endsnippet

snippet cos "constant string" b
public static final String ${1:var} = "$2";$0
endsnippet

snippet co "constant" b
public static final ${1:String} ${2:var} = $3;$0
endsnippet

snippet de "default" b
default:
	$0
endsnippet

snippet elif "else if"
else if ($1)`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet el "else" w
else`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet fi "final" b
final $0
endsnippet

snippet fore "for (each)" b
for ($1 : $2)`!p nl(snip)`{
	$0
}
endsnippet

snippet fori "for" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++)`!p nl(snip)`{
	$0
}
endsnippet

snippet for "for" b
for ($1; $2; $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet if "if" b
if ($1)`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet imt "import junit_framework_TestCase;"  b
import junit.framework.TestCase;
$0
endsnippet

snippet importcommon "import common package;"  b
import com.google.common.base.BinaryPredicate;
import com.google.common.base.Joiner;
import com.google.common.base.Pair;
import com.google.common.base.Predicates;
import com.google.common.base.Splitter;
import com.google.common.base.Stopwatch;
import com.google.common.base.Ticker;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSetMultimap;
import com.google.common.collect.ImmutableTable;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Multimap;
import com.google.common.collect.MultimapBuilder;
import com.google.common.collect.Sets;
import com.google.common.flags.Flag;
import com.google.common.flags.FlagSpec;
import com.google.common.flogger.GoogleLogger;
import com.google.common.inject.testing.ModuleTester;
import com.google.common.inject.testing.SettableProvider;
import com.google.common.io.Resources;
import com.google.common.re2.Matcher;
import com.google.common.re2.Pattern;
import com.google.common.truth.Correspondence;
import com.google.inject.AbstractModule;
import com.google.inject.Guice;
import com.google.inject.Provides;
import com.google.inject.Scopes;
import com.google.inject.servlet.RequestScoped;
import com.google.inject.testing.fieldbinder.Bind;
import com.google.inject.testing.fieldbinder.BoundFieldModule;
import com.google.io.base.Marshaller;
import com.google.io.file.GoogleFile;
import com.google.net.util.error.Codes.Code;
import com.google.testing.testsize.MediumTest;
import com.google.testing.testsize.MediumTestAttribute;
import com.google.tracing.testing.TraceContextRule;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.nio.ByteBuffer;
import java.time.Clock;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import javax.annotation.Nullable;
import javax.inject.Inject;
import javax.inject.Provider;
import javax.inject.Singleton;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.base.Predicates.compose;
import static com.google.common.collect.ImmutableList.toImmutableList;
import static com.google.common.collect.ImmutableSet.toImmutableSet;
import static com.google.common.truth.Truth.assertThat;
import static java.nio.charset.StandardCharsets.UTF_8;
import static java.util.function.Function.identity;
import static java.util.stream.Collectors.toList;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;
import static org.junit.Assert.assertThrows;
$0
endsnippet

snippet throw "throw exception" b
throw new $0IllegalArgumentException();
endsnippet

snippet String.format "String.format();" b
String.format(${1})$0
endsnippet

snippet assertThat.containsAtLeast "assertThat(abc).containsAtLeast(a, b, c);" b
assertThat(${1:abc}).containsAtLeast(${2:"a", "b", "c"});$0
endsnippet

snippet assertThat.containsExactly "assertThat(abc).containsExactly(a, b, c);" b
assertThat(${1:abc}).containsExactly(${2:"a", "b", "c"});$0
endsnippet

snippet assertThat.containsExactlyElementsIn "assertThat(abc).containsExactlyElementsIn(list);" b
assertThat(${1:abc}).containsExactlyElementsIn(${2:list});$0
endsnippet

snippet assertThat.isEqualTo "assertThat(a).isEqualTo(b);" b
assertThat(${1:actualValue}).isEqualTo(${2:expectedValue});$0
endsnippet

snippet assertThat.isLessThan "assertThat(a).isLessThan(b);" b
assertThat(${1:actualValue}).isLessThan(${2:expectedValue});$0
endsnippet

snippet assertThat.isGreaterThan "assertThat(a).isGreaterThan(b);" b
assertThat(${1:actualValue}).isGreaterThan(${2:expectedValue});$0
endsnippet

snippet assertThat.isAnyOf "assertThat(a).isAnyOf(a, b, c);" b
assertThat(${1:a}).isAnyOf(${2:a, b, c});$0
endsnippet

snippet assertThat.isWithin.of "assertThat(a).isWithin(b).of(c);" b
assertThat(${1:actualDouble}).isWithin(${2:tolerance}).of(expectedDouble);$0
endsnippet

snippet import "import"  b
import ${1:java.util};$0
endsnippet

snippet interface "interface" b
interface ${1:`!p snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }{
	$0
}
endsnippet

snippet cc "constructor call or setter body"
this.${1:var} = $1;
endsnippet

snippet list "Collections List" b
List<${1:String}> ${2:list} = new ${3:Array}List<>();
endsnippet

snippet map "Collections Map" b
Map<${1:String}, ${2:String}> ${3:map} = new ${4:Hash}Map<>();
endsnippet

snippet set "Collections Set" b
Set<${1:String}> ${2:set} = new ${3:Hash}Set<>();
endsnippet

snippet /Str?|str/ "String" br
String $0
endsnippet

snippet cn "Constructor" b
public `!p snip.rv = snip.basename or "untitled"`(${1:}) {
	$0
}
endsnippet

snippet cn "constructor, \w fields + assigments" b
	`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
}
endsnippet

snippet j.b "java_beans_" i
java.beans.
endsnippet

snippet j.i "java_io" i
java.io.
endsnippet

snippet j.m "java_math" i
java.math.
endsnippet

snippet j.n "java_net_" i
java.net.
endsnippet

snippet j.u "java_util_"  i
java.util.
endsnippet

snippet main "method (main)" b
public static void main(String[] args)`!p nl(snip)`{
	$0
}
endsnippet

snippet try "try/catch" b
try {
	$1${VISUAL}
} catch(${2:Exception} ${3:e}){
	${4:e.printStackTrace();}
}
endsnippet

snippet mt "method throws" b
${1:private} ${2:void} ${3:method}($4) ${5:throws $6 }{
	$0
}
endsnippet

snippet m  "method" b
${1:private} ${2:void} ${3:method}($4) {
	$0
}
endsnippet

snippet md "Method With javadoc" b
/**
 * ${7:Short Description}`!p
for i in getArgs(t[4]):
	snip.rv += "\n\t * @param " + i[1] + " usage..."`
 *`!p
if "throws" in t[5]:
	snip.rv = "\n\t * @throws " + t[6]
else:
	snip.rv = ""``!p
if not "void" in t[2]:
	snip.rv = "\n\t * @return object"
else:
	snip.rv = ""`
 **/
${1:public} ${2:void} ${3:method}($4) ${5:throws $6 }{
	$0
}
endsnippet

snippet /get(ter)?/ "getter" br
public ${1:String} get${2:Name}() {
	return `!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet setter "setter" b
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet /se?tge?t|ge?tse?t|gs/ "setter and getter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}`!p snip.rv += "\n"`
public $2 get$1() {
	return `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet pa "package" b
package $0
endsnippet

snippet p "print" b
System.out.print($1);$0
endsnippet

snippet pl "println"  b
System.out.println($1);$0
endsnippet

snippet pr "private" b
private $0
endsnippet

snippet po "protected" b
protected $0
endsnippet

snippet pu "public" b
public $0
endsnippet

snippet re "return" b
return $0
endsnippet

snippet st "static"
static $0
endsnippet

snippet sw "switch" b
switch ($1)`!p nl(snip)`{
	case $2: $0
}
endsnippet

snippet sy "synchronized"
synchronized $0
endsnippet

snippet tc "test case"
public class ${1:`!p snip.rv = snip.basename or "untitled"`} extends ${2:TestCase}`!p nl(snip)`{
	$0
}
endsnippet

snippet t "test" b
`!p junit(snip)`public void test${1:Name}() {
	$0
}
endsnippet

snippet tt "test throws" b
`!p junit(snip)`public void test${1:Name}() ${2:throws Exception }{
	$0
}
endsnippet

snippet th "throw" b
throw new $0
endsnippet

snippet wh "while" b
while ($1)`!p nl(snip)`{
	$0
}
endsnippet

# start final (index: kasldfhjo)
snippet BinaryPredicate
import com.google.common.base.BinaryPredicate;
endsnippet

snippet Joiner
import com.google.common.base.Joiner;
endsnippet

snippet Pair
import com.google.common.base.Pair;
endsnippet

snippet Predicates
import com.google.common.base.Predicates;
endsnippet

snippet Splitter
import com.google.common.base.Splitter;
endsnippet

snippet Stopwatch
import com.google.common.base.Stopwatch;
endsnippet

snippet Ticker
import com.google.common.base.Ticker;
endsnippet

snippet ImmutableList
import com.google.common.collect.ImmutableList;
endsnippet

snippet ImmutableMap
import com.google.common.collect.ImmutableMap;
endsnippet

snippet ImmutableMultimap
import com.google.common.collect.ImmutableMultimap;
endsnippet

snippet ImmutableSet
import com.google.common.collect.ImmutableSet;
endsnippet

snippet ImmutableSetMultimap
import com.google.common.collect.ImmutableSetMultimap;
endsnippet

snippet ImmutableTable
import com.google.common.collect.ImmutableTable;
endsnippet

snippet Iterables
import com.google.common.collect.Iterables;
endsnippet

snippet Lists
import com.google.common.collect.Lists;
endsnippet

snippet Maps
import com.google.common.collect.Maps;
endsnippet

snippet Multimap
import com.google.common.collect.Multimap;
endsnippet

snippet MultimapBuilder
import com.google.common.collect.MultimapBuilder;
endsnippet

snippet Sets
import com.google.common.collect.Sets;
endsnippet

snippet Flag
import com.google.common.flags.Flag;
endsnippet

snippet FlagSpec
import com.google.common.flags.FlagSpec;
endsnippet

snippet GoogleLogger
import com.google.common.flogger.GoogleLogger;
endsnippet

snippet ModuleTester
import com.google.common.inject.testing.ModuleTester;
endsnippet

snippet SettableProvider
import com.google.common.inject.testing.SettableProvider;
endsnippet

snippet Resources
import com.google.common.io.Resources;
endsnippet

snippet Matcher
import com.google.common.re2.Matcher;
endsnippet

snippet Pattern
import com.google.common.re2.Pattern;
endsnippet

snippet Correspondence
import com.google.common.truth.Correspondence;
endsnippet

snippet AbstractModule
import com.google.inject.AbstractModule;
endsnippet

snippet Guice
import com.google.inject.Guice;
endsnippet

snippet Provides
import com.google.inject.Provides;
endsnippet

snippet Scopes
import com.google.inject.Scopes;
endsnippet

snippet RequestScoped
import com.google.inject.servlet.RequestScoped;
endsnippet

snippet Bind
import com.google.inject.testing.fieldbinder.Bind;
endsnippet

snippet BoundFieldModule
import com.google.inject.testing.fieldbinder.BoundFieldModule;
endsnippet

snippet Marshaller
import com.google.io.base.Marshaller;
endsnippet

snippet GoogleFile
import com.google.io.file.GoogleFile;
endsnippet

snippet Code
import com.google.net.util.error.Codes.Code;
endsnippet

snippet MediumTest
import com.google.testing.testsize.MediumTest;
endsnippet

snippet MediumTestAttribute
import com.google.testing.testsize.MediumTestAttribute;
endsnippet

snippet TraceContextRule
import com.google.tracing.testing.TraceContextRule;
endsnippet

snippet File
import java.io.File;
endsnippet

snippet FileInputStream
import java.io.FileInputStream;
endsnippet

snippet FileNotFoundException
import java.io.FileNotFoundException;
endsnippet

snippet ByteBuffer
import java.nio.ByteBuffer;
endsnippet

snippet Clock
import java.time.Clock;
endsnippet

snippet Duration
import java.time.Duration;
endsnippet

snippet Instant
import java.time.Instant;
endsnippet

snippet ArrayList
import java.util.ArrayList;
endsnippet

snippet Arrays
import java.util.Arrays;
endsnippet

snippet BitSet
import java.util.BitSet;
endsnippet

snippet Collection
import java.util.Collection;
endsnippet

snippet Collections
import java.util.Collections;
endsnippet

snippet Comparator
import java.util.Comparator;
endsnippet

snippet HashMap
import java.util.HashMap;
endsnippet

snippet HashSet
import java.util.HashSet;
endsnippet

snippet Iterator
import java.util.Iterator;
endsnippet

snippet LinkedHashMap
import java.util.LinkedHashMap;
endsnippet

snippet LinkedHashSet
import java.util.LinkedHashSet;
endsnippet

snippet List
import java.util.List;
endsnippet

snippet Map
import java.util.Map;
endsnippet

snippet Optional
import java.util.Optional;
endsnippet

snippet Set
import java.util.Set;
endsnippet

snippet ExecutionException
import java.util.concurrent.ExecutionException;
endsnippet

snippet Function
import java.util.function.Function;
endsnippet

snippet Predicate
import java.util.function.Predicate;
endsnippet

snippet Collectors
import java.util.stream.Collectors;
endsnippet

snippet IntStream
import java.util.stream.IntStream;
endsnippet

snippet Stream
import java.util.stream.Stream;
endsnippet

snippet Nullable
import javax.annotation.Nullable;
endsnippet

snippet Inject
import javax.inject.Inject;
endsnippet

snippet Provider
import javax.inject.Provider;
endsnippet

snippet Singleton
import javax.inject.Singleton;
endsnippet

snippet After
import org.junit.After;
endsnippet

snippet Before
import org.junit.Before;
endsnippet

snippet Rule
import org.junit.Rule;
endsnippet

snippet Test
import org.junit.Test;
endsnippet

snippet TemporaryFolder
import org.junit.rules.TemporaryFolder;
endsnippet

snippet RunWith
import org.junit.runner.RunWith;
endsnippet

snippet JUnit4
import org.junit.runners.JUnit4;
endsnippet

snippet checkArgument
import static com.google.common.base.Preconditions.checkArgument;
endsnippet

snippet checkNotNull
import static com.google.common.base.Preconditions.checkNotNull;
endsnippet

snippet compose
import static com.google.common.base.Predicates.compose;
endsnippet

snippet toImmutableList
import static com.google.common.collect.ImmutableList.toImmutableList;
endsnippet

snippet toImmutableSet
import static com.google.common.collect.ImmutableSet.toImmutableSet;
endsnippet

snippet assertThat
import static com.google.common.truth.Truth.assertThat;
endsnippet

snippet UTF_8
import static java.nio.charset.StandardCharsets.UTF_8;
endsnippet

snippet identity
import static java.util.function.Function.identity;
endsnippet

snippet toList
import static java.util.stream.Collectors.toList;
endsnippet

snippet toMap
import static java.util.stream.Collectors.toMap;
endsnippet

snippet toSet
import static java.util.stream.Collectors.toSet;
endsnippet

snippet assertThrows
import static org.junit.Assert.assertThrows;
endsnippet

